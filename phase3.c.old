#include "include.h"

struct route * read_and_clear(uint32_t addrref) {
    // read and clear the push flag
    // if the route changes whilst we are working then a new action will be scheduled
    uint_fast64_t* p = (uint_fast64_t*) &LOCRIB[addrref];
    uint_fast64_t routeptr = atomic_fetch_xor(p,TOP64);
    return (struct route *) routeptr;
};

static uint8_t tx_buffer[4096] = {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff };

void schedule_phase3() {
  uint32_t addrref;
  uint32_t addrreftable [ 2048 ];
  uint16_t table_index;
  struct route * route, *route2;
  uint8_t *txp;
  bool is_withdraw;
  
  addrref = locribj_pull();
  while (JOURNAL_EMPTY != addrref) {
  // loop over potential multiple updates in the journal
  // each iteration is marked by an end-of-block flag in the addrref stream
    table_index = 0;
    addrreftable[table_index++] = _LR_INDEX_MASK & addrref;
    route = read_and_clear(_LR_INDEX_MASK & addrref);
    is_withdraw =  _LR_NULL_ROUTE  & addrref;

    while (!(_LR_EOB & addrref)) {
      addrref = locribj_pull();
      addrreftable[table_index++] = _LR_INDEX_MASK & addrref;
      route2 = read_and_clear(_LR_INDEX_MASK & addrref);
      /*
      assert((JOURNAL_EMPTY != addrref));

      if (!(route2==route)) {
        printf("!(route2==route) %p != %p\n",route2,route);
	if (JOURNAL_EMPTY == addrref)
          printf("addrref = JOURNAL_EMPTY ");
	else
          printf("addrref = %d ",_LR_INDEX_MASK & addrref);
	if ((_LR_EOB & addrref))
	  printf("EOB ");
	if (is_withdraw)
	  printf("NULL ROUTE ");
	fflush(stdout);
	if (route2)
          printf("!(route2==route) %ld != %ld\n",route2->unique,route->unique);
	break;  // should assemble multiple updates
	        // but not fail...
      };
      */

      // assert(route2==route);  // this is a corner case which can only happen if routes were updated after the journal was written, which is
                              // allowed but unlikely in unstressed or single thread testing
                              // to be fixed up later.....
    };

    assert((JOURNAL_EMPTY != addrref)); // this is a hard assertion
                                       // because the journal should always contain blocks terminated with a marker,
                                       // so hitting the end of the journal on a non terminal addrref
                                       // is either a bug or proof that we need a spinlock (we do really)
                                       // the spin lock would allow journal blocked operations to be atomic
                                       // and also probably remove th eneed for the atomic operation over the active flag
    // now we have a contiguous block and a single route
    // we need to call per peergroup ARO functions.
 
    uint32_t index;
    uint16_t pix;

    // update structure is 16 byte header 16 bit total length 1 byte type 
    //                     16 bit withdraw length <variable> withdraw prefixes
    //                     16 bit arributes length <variable> arributes
    //                     <variable> update prefixes
    tx_buffer[18] = 2;
    if (is_withdraw){
      txp = tx_buffer+23;
      for (index=0; index < table_index; index++)
        build_nlri(&txp,lookup_bigtable(addrreftable[index]));
      uint16_t withdraw_length = txp - (tx_buffer+21);
      uint16_t update_length = withdraw_length + 23;
      putw16(tx_buffer+16,update_length);
      putw16(tx_buffer+19,withdraw_length);
      putw16(txp, 0); // path attribute length

      for (pix=0;pix<npeergroups;pix++)
        assert (update_length == write(peergroups[pix].fd,tx_buffer,update_length));

    } else {
      putw16(tx_buffer+19,0); // withdrwa length zero for all updates
      for (pix=0;pix<npeergroups;pix++) {
	struct peergroup *pg = &peergroups[pix];
        txp = tx_buffer+23;
        pg->serialize(CLEAR64(route),&txp,4064);
        uint16_t attribute_length = txp - (tx_buffer+23);
        putw16(tx_buffer+21, attribute_length);
        for (index=0; index < table_index; index++)
          build_nlri(&txp,lookup_bigtable(addrreftable[index]));
        uint16_t update_length = txp - tx_buffer;
        putw16(tx_buffer+16,update_length);
        assert (update_length == write(peergroups[pix].fd,tx_buffer,update_length));
      };
    };
    addrref = locribj_pull();
  };
};
